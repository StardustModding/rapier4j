class Isometry<T> {
    bound T: Scalar + RealField;

    static fn from_parts(translation: Translation<T>, rotation: Unit<Quaternion<T>>) -> Isometry<T>;

    fn inverse() -> Isometry<T>;
    fn inv_mul(rhs: &Isometry<T>) -> Isometry<T>;
    fn transform_point(pt: &OPoint3<T>) -> OPoint3<T>;
    fn transform_vector(v: &Matrix3<T>) -> Matrix3<T>;
    fn inverse_transform_point(pt: &OPoint3<T>) -> OPoint3<T>;
    fn inverse_transform_vector(v: &Matrix3<T>) -> Matrix3<T>;
    fn inverse_transform_unit_vector(v: &Unit<Matrix3<T>>) -> Unit<Matrix3<T>>;
    
    mut fn inverse_mut();
    mut fn append_translation_mut(t: &Translation<T>);
    mut fn append_rotation_mut(r: &Unit<Quaternion<T>>);
    mut fn append_rotation_wrt_point_mut(r: &Unit<Quaternion<T>>, p: &OPoint3<T>);
    mut fn append_rotation_wrt_center_mut(r: &Unit<Quaternion<T>>);

    // TODO: Other impls
};
